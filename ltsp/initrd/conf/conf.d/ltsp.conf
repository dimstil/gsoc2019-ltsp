#!/bin/sh -n
# This file is part of LTSP, https://ltsp.github.io
# Copyright 2019 the LTSP team, see AUTHORS
# SPDX-License-Identifier: GPL-3.0-or-later

# Inject LTSP code under initramfs-tools

# Sourced by initramfs-tools init before any other scripts. Specifically:
# /conf/conf.d/*, /scripts/functions, /proc/cmdline, break:top,
# /scripts/init-top, break:modules, break:premount, /scripts/init-premount,
# break:mount, /scripts/local, /scripts/nfs, break:mountroot,
# /scripts/local-top, /scripts/local-premount, mountroot, /scripts/nfs-bottom,
# /scripts/local-bottom, break:bottom, /scripts/init-bottom, mount move run,
# break:init, run-init.
# Another way to hook would be rdinit=.

# Notes:
# It needs the .conf extension, it can't be .sh.
# /run exists at this point, but something clears it later on,
# so we can't move /ltsp to /run/ltsp now.
# Don't exit from here! It's sourced!

# Initramfs-tools run_scripts() sources /scripts/*/ORDER, which in turn
# runs the scripts and reads possible output from /conf/param.conf.
# Hook our scripts at the end of each ORDER, except for init-bottom.
# E.g. ltsp-bottom in Ubuntu needs to run before udev moves /dev to /root/dev.
for script in /scripts/*/*ltsp*.sh; do
    entry=$(printf "%s %s\n" "$script" '"$@"
[ -e /conf/param.conf ] && . /conf/param.conf')
    if [ "$script" != "${script#/scripts/init-bottom/}" ]; then
        if [ -f "${script%/*}/ORDER" ]; then
            order=$(cat "${script%/*}/ORDER")
        else
            order=""
        fi
        printf "%s%s\n" "$entry" "$order" >"${script%/*}/ORDER"
    else
        printf "%s\n" "$entry" >>"${script%/*}/ORDER"
    fi
done

# TODO: to fsck or not to fsck? If it doesn't fsck read-only netmounts,
# then it's best to leave the defaults, so that it checks local disks.
# E.g. local disk that needs to be used as ltsphome, AND that has our rootfs.
# export fastboot=y

# Don't search for a resume device
rm -f /conf/conf.d/resume

# Don't use an fstab
rm -f /etc/fstab
